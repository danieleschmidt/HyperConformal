version: '3.8'

services:
  # Main HyperConformal service
  hyperconformal:
    build: 
      context: ../
      dockerfile: docker/Dockerfile
      target: production
    container_name: hyperconformal-main
    ports:
      - "8080:8080"
      - "8081:8081"
    environment:
      - HYPERCONFORMAL_MODE=production
      - HYPERCONFORMAL_WORKERS=4
      - HYPERCONFORMAL_LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379
      - PROMETHEUS_PUSHGATEWAY=http://pushgateway:9091
    volumes:
      - hyperconformal_models:/app/models
      - hyperconformal_logs:/app/logs
    depends_on:
      - redis
      - pushgateway
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    healthcheck:
      test: ["CMD", "python", "/app/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and coordination
  redis:
    image: redis:7-alpine
    container_name: hyperconformal-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: hyperconformal-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - hyperconformal_logs:/var/log/hyperconformal:ro
    depends_on:
      - hyperconformal
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: hyperconformal-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Prometheus Pushgateway for batch metrics
  pushgateway:
    image: prom/pushgateway:latest
    container_name: hyperconformal-pushgateway
    ports:
      - "9091:9091"
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: hyperconformal-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=hyperconformal_admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: hyperconformal-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    volumes:
      - jaeger_data:/tmp
    restart: unless-stopped

  # Worker nodes for distributed processing
  worker-1:
    build: 
      context: ../
      dockerfile: docker/Dockerfile
      target: production
    container_name: hyperconformal-worker-1
    environment:
      - HYPERCONFORMAL_MODE=worker
      - HYPERCONFORMAL_WORKER_ID=1
      - HYPERCONFORMAL_COORDINATOR=hyperconformal:8080
      - REDIS_URL=redis://redis:6379
    volumes:
      - hyperconformal_models:/app/models:ro
    depends_on:
      - hyperconformal
      - redis
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  worker-2:
    build: 
      context: ../
      dockerfile: docker/Dockerfile
      target: production
    container_name: hyperconformal-worker-2
    environment:
      - HYPERCONFORMAL_MODE=worker
      - HYPERCONFORMAL_WORKER_ID=2
      - HYPERCONFORMAL_COORDINATOR=hyperconformal:8080
      - REDIS_URL=redis://redis:6379
    volumes:
      - hyperconformal_models:/app/models:ro
    depends_on:
      - hyperconformal
      - redis
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Log aggregation with Fluentd
  fluentd:
    image: fluent/fluentd:v1.16-debian
    container_name: hyperconformal-fluentd
    volumes:
      - ./fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - hyperconformal_logs:/var/log/hyperconformal:ro
    ports:
      - "24224:24224"
    restart: unless-stopped

  # ElasticSearch for log storage
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: hyperconformal-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: hyperconformal-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    restart: unless-stopped

volumes:
  hyperconformal_models:
    driver: local
  hyperconformal_logs:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  jaeger_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  default:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16