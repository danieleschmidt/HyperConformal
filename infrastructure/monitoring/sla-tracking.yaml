# SLA Tracking and 99.99% Availability Monitoring
# Comprehensive observability for enterprise SLA compliance

apiVersion: v1
kind: Namespace
metadata:
  name: hyperconformal-sla-monitoring
  labels:
    name: hyperconformal-sla-monitoring
    purpose: sla-compliance

---
# SLA Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: sla-config
  namespace: hyperconformal-sla-monitoring
data:
  sla-targets.yaml: |
    sla_targets:
      availability:
        target: 99.99
        unit: "percent"
        measurement_period: "monthly"
        downtime_budget_minutes: 4.32  # 99.99% = 4.32 minutes/month
        
      response_time:
        target: 100
        unit: "milliseconds"
        percentile: 95
        measurement_period: "5m"
        
      throughput:
        target: 347000
        unit: "requests_per_second"
        measurement_period: "1m"
        
      error_rate:
        target: 0.01
        unit: "percent"
        measurement_period: "5m"
        
      quantum_performance:
        target: 1
        unit: "milliseconds"
        description: "Quantum HDC algorithm execution time"
        measurement_period: "1m"
    
    sla_windows:
      business_hours: "09:00-17:00"
      timezone: "UTC"
      weekdays_only: false
      exclude_maintenance: true
      
    alerting:
      breach_threshold: 0.1  # Alert when within 10% of SLA breach
      critical_threshold: 0.05  # Critical alert when within 5%
      recovery_threshold: 0.2  # All clear when 20% above threshold

---
# SLA Monitoring Dashboard ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: sla-dashboard-config
  namespace: hyperconformal-sla-monitoring
data:
  sla-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "HyperConformal SLA Monitoring",
        "tags": ["sla", "availability", "performance"],
        "timezone": "UTC",
        "refresh": "10s",
        "time": {
          "from": "now-24h",
          "to": "now"
        },
        "panels": [
          {
            "id": 1,
            "title": "Availability SLA Status",
            "type": "stat",
            "targets": [
              {
                "expr": "avg_over_time(up{job=\"hyperconformal-app\"}[1h]) * 100",
                "legendFormat": "Current Availability %"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "percent",
                "min": 99.9,
                "max": 100,
                "thresholds": {
                  "steps": [
                    {"color": "red", "value": 0},
                    {"color": "yellow", "value": 99.95},
                    {"color": "green", "value": 99.99}
                  ]
                },
                "custom": {
                  "displayMode": "lcd",
                  "orientation": "horizontal"
                }
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Downtime Budget Remaining",
            "type": "stat",
            "targets": [
              {
                "expr": "(1 - (1 - avg_over_time(up{job=\"hyperconformal-app\"}[30d]))) * 43200 - 4.32",
                "legendFormat": "Minutes Remaining"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "m",
                "thresholds": {
                  "steps": [
                    {"color": "red", "value": 0},
                    {"color": "yellow", "value": 1},
                    {"color": "green", "value": 2}
                  ]
                }
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "id": 3,
            "title": "Response Time SLA",
            "type": "timeseries",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(hyperconformal_request_duration_seconds_bucket[5m])) * 1000",
                "legendFormat": "95th Percentile Latency"
              },
              {
                "expr": "100",
                "legendFormat": "SLA Target (100ms)"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "ms",
                "custom": {
                  "drawStyle": "line",
                  "lineInterpolation": "linear",
                  "pointSize": 5,
                  "showPoints": "never"
                }
              },
              "overrides": [
                {
                  "matcher": {"id": "byName", "options": "SLA Target (100ms)"},
                  "properties": [
                    {"id": "color", "value": {"mode": "fixed", "fixedColor": "red"}},
                    {"id": "custom.drawStyle", "value": "line"},
                    {"id": "custom.lineStyle", "value": {"fill": "dash"}}
                  ]
                }
              ]
            },
            "gridPos": {"h": 8, "w": 24, "x": 0, "y": 8}
          },
          {
            "id": 4,
            "title": "Throughput vs SLA Target",
            "type": "timeseries",
            "targets": [
              {
                "expr": "sum(rate(hyperconformal_requests_total[1m]))",
                "legendFormat": "Current RPS"
              },
              {
                "expr": "347000",
                "legendFormat": "Target RPS (347K)"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "reqps",
                "custom": {
                  "drawStyle": "line",
                  "fillOpacity": 10
                }
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 16}
          },
          {
            "id": 5,
            "title": "Error Rate SLA",
            "type": "timeseries",
            "targets": [
              {
                "expr": "rate(hyperconformal_requests_total{status!~\"2..\"}[5m]) / rate(hyperconformal_requests_total[5m]) * 100",
                "legendFormat": "Error Rate %"
              },
              {
                "expr": "0.01",
                "legendFormat": "SLA Target (0.01%)"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "percent",
                "max": 1,
                "thresholds": {
                  "steps": [
                    {"color": "green", "value": 0},
                    {"color": "yellow", "value": 0.005},
                    {"color": "red", "value": 0.01}
                  ]
                }
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 16}
          },
          {
            "id": 6,
            "title": "Quantum Algorithm Performance",
            "type": "timeseries",
            "targets": [
              {
                "expr": "avg(hyperconformal_quantum_algorithm_duration_seconds) * 1000",
                "legendFormat": "Quantum Algorithm Latency"
              },
              {
                "expr": "1",
                "legendFormat": "Target (1ms)"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "ms",
                "max": 2
              }
            },
            "gridPos": {"h": 8, "w": 24, "x": 0, "y": 24}
          }
        ]
      }
    }

---
# SLA Calculator Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sla-calculator
  namespace: hyperconformal-sla-monitoring
spec:
  replicas: 2
  selector:
    matchLabels:
      app: sla-calculator
  template:
    metadata:
      labels:
        app: sla-calculator
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: sla-calculator-sa
      containers:
      - name: sla-calculator
        image: hyperconformal/sla-calculator:latest
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: PROMETHEUS_URL
          value: "http://prometheus.hyperconformal-monitoring.svc.cluster.local:9090"
        - name: SLA_CONFIG_PATH
          value: "/config/sla-targets.yaml"
        - name: CALCULATION_INTERVAL
          value: "60s"
        - name: RETENTION_DAYS
          value: "90"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 10
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: sla-config
          mountPath: /config
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: sla-config
        configMap:
          name: sla-config
      - name: tmp
        emptyDir: {}

---
# SLA Calculator Service
apiVersion: v1
kind: Service
metadata:
  name: sla-calculator
  namespace: hyperconformal-sla-monitoring
  labels:
    app: sla-calculator
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    name: http
  selector:
    app: sla-calculator

---
# SLA Calculator ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sla-calculator-sa
  namespace: hyperconformal-sla-monitoring

---
# RBAC for SLA Calculator
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: sla-calculator
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: sla-calculator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: sla-calculator
subjects:
- kind: ServiceAccount
  name: sla-calculator-sa
  namespace: hyperconformal-sla-monitoring

---
# SLA Alerting Rules
apiVersion: v1
kind: ConfigMap
metadata:
  name: sla-alerting-rules
  namespace: hyperconformal-monitoring
data:
  sla-rules.yml: |
    groups:
    - name: sla.availability
      rules:
      # Availability SLA Monitoring
      - alert: AvailabilitySLABreach
        expr: avg_over_time(up{job="hyperconformal-app"}[1h]) * 100 < 99.99
        for: 1m
        labels:
          severity: critical
          sla: availability
          team: sre
        annotations:
          summary: "Availability SLA breached"
          description: "Current availability is {{ $value }}%, below 99.99% SLA"
          runbook: "https://runbooks.hyperconformal.ai/sla/availability"
      
      - alert: AvailabilitySLAWarning
        expr: avg_over_time(up{job="hyperconformal-app"}[1h]) * 100 < 99.995
        for: 2m
        labels:
          severity: warning
          sla: availability
          team: sre
        annotations:
          summary: "Availability approaching SLA threshold"
          description: "Current availability is {{ $value }}%, approaching 99.99% SLA"
      
      # Downtime Budget Monitoring
      - alert: DowntimeBudgetExhausted
        expr: sla_downtime_budget_remaining_minutes < 0
        for: 0m
        labels:
          severity: critical
          sla: downtime_budget
          team: sre
        annotations:
          summary: "Monthly downtime budget exhausted"
          description: "Downtime budget exceeded by {{ $value | humanize }} minutes"
          action: "Implement emergency procedures to restore service"
      
      - alert: DowntimeBudgetLow
        expr: sla_downtime_budget_remaining_minutes < 1
        for: 1m
        labels:
          severity: warning
          sla: downtime_budget
          team: sre
        annotations:
          summary: "Monthly downtime budget critically low"
          description: "Only {{ $value | humanize }} minutes remaining in downtime budget"
    
    - name: sla.performance
      rules:
      # Response Time SLA
      - alert: ResponseTimeSLABreach
        expr: histogram_quantile(0.95, rate(hyperconformal_request_duration_seconds_bucket[5m])) * 1000 > 100
        for: 2m
        labels:
          severity: critical
          sla: response_time
          team: performance
        annotations:
          summary: "Response time SLA breached"
          description: "95th percentile response time is {{ $value }}ms, above 100ms SLA"
          runbook: "https://runbooks.hyperconformal.ai/sla/response-time"
      
      # Throughput SLA
      - alert: ThroughputSLABreach
        expr: sum(rate(hyperconformal_requests_total[1m])) < 300000
        for: 5m
        labels:
          severity: warning
          sla: throughput
          team: performance
        annotations:
          summary: "Throughput below SLA target"
          description: "Current RPS is {{ $value }}, below 347K target"
      
      # Error Rate SLA
      - alert: ErrorRateSLABreach
        expr: rate(hyperconformal_requests_total{status!~"2.."}[5m]) / rate(hyperconformal_requests_total[5m]) > 0.0001
        for: 1m
        labels:
          severity: critical
          sla: error_rate
          team: reliability
        annotations:
          summary: "Error rate SLA breached"
          description: "Error rate is {{ $value | humanizePercentage }}, above 0.01% SLA"
      
      # Quantum Algorithm Performance
      - alert: QuantumPerformanceSLABreach
        expr: avg(hyperconformal_quantum_algorithm_duration_seconds) > 0.001
        for: 1m
        labels:
          severity: warning
          sla: quantum_performance
          team: research
        annotations:
          summary: "Quantum algorithm performance degraded"
          description: "Quantum algorithm latency is {{ $value }}s, above 1ms target"

---
# SLA Report Generator
apiVersion: batch/v1
kind: CronJob
metadata:
  name: sla-report-generator
  namespace: hyperconformal-sla-monitoring
spec:
  schedule: "0 6 1 * *"  # Monthly on 1st at 6 AM
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: sla-report-sa
          containers:
          - name: report-generator
            image: hyperconformal/sla-reporter:latest
            command: ["/bin/sh"]
            args:
            - -c
            - |
              echo "Generating monthly SLA report..."
              
              # Calculate SLA metrics for the past month
              python3 /app/generate_sla_report.py \
                --start-date "$(date -d '1 month ago' +%Y-%m-01)" \
                --end-date "$(date +%Y-%m-01)" \
                --output-format json \
                --output-file /tmp/sla-report.json
              
              # Upload report to S3
              aws s3 cp /tmp/sla-report.json \
                s3://hyperconformal-sla-reports/$(date +%Y)/$(date +%m)/sla-report-$(date +%Y-%m).json
              
              # Send summary email
              python3 /app/send_sla_summary.py --report-file /tmp/sla-report.json
              
              echo "SLA report generation completed"
            env:
            - name: PROMETHEUS_URL
              value: "http://prometheus.hyperconformal-monitoring.svc.cluster.local:9090"
            - name: SMTP_SERVER
              value: "smtp.hyperconformal.ai"
            - name: REPORT_RECIPIENTS
              value: "sla-team@hyperconformal.ai,leadership@hyperconformal.ai"
            resources:
              requests:
                memory: "512Mi"
                cpu: "200m"
              limits:
                memory: "1Gi"
                cpu: "500m"
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              runAsNonRoot: true
              runAsUser: 1001
              capabilities:
                drop:
                - ALL
            volumeMounts:
            - name: tmp
              mountPath: /tmp
          volumes:
          - name: tmp
            emptyDir: {}
          restartPolicy: OnFailure

---
# SLA Report ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sla-report-sa
  namespace: hyperconformal-sla-monitoring
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT-ID:role/sla-report-role"

---
# Custom Metrics for SLA Tracking
apiVersion: v1
kind: ConfigMap
metadata:
  name: sla-custom-metrics
  namespace: hyperconformal-monitoring
data:
  recording-rules.yml: |
    groups:
    - name: sla.recording
      interval: 30s
      rules:
      # Availability Recording Rules
      - record: sla:availability:1h
        expr: avg_over_time(up{job="hyperconformal-app"}[1h])
      
      - record: sla:availability:24h
        expr: avg_over_time(up{job="hyperconformal-app"}[24h])
      
      - record: sla:availability:30d
        expr: avg_over_time(up{job="hyperconformal-app"}[30d])
      
      # Response Time Recording Rules
      - record: sla:response_time:95th:5m
        expr: histogram_quantile(0.95, rate(hyperconformal_request_duration_seconds_bucket[5m]))
      
      - record: sla:response_time:99th:5m
        expr: histogram_quantile(0.99, rate(hyperconformal_request_duration_seconds_bucket[5m]))
      
      # Throughput Recording Rules
      - record: sla:throughput:1m
        expr: sum(rate(hyperconformal_requests_total[1m]))
      
      - record: sla:throughput:5m
        expr: sum(rate(hyperconformal_requests_total[5m]))
      
      # Error Rate Recording Rules
      - record: sla:error_rate:5m
        expr: rate(hyperconformal_requests_total{status!~"2.."}[5m]) / rate(hyperconformal_requests_total[5m])
      
      # Downtime Budget Calculation
      - record: sla:downtime_budget_remaining_minutes
        expr: (1 - (1 - avg_over_time(up{job="hyperconformal-app"}[30d]))) * 43200 - 4.32
      
      # SLA Compliance Percentage
      - record: sla:compliance_score
        expr: |
          (
            (sla:availability:30d >= 0.9999) * 25 +
            (sla:response_time:95th:5m <= 0.1) * 25 +
            (sla:throughput:5m >= 300000) * 25 +
            (sla:error_rate:5m <= 0.0001) * 25
          )

---
# SLA Status API
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sla-status-api
  namespace: hyperconformal-sla-monitoring
spec:
  replicas: 2
  selector:
    matchLabels:
      app: sla-status-api
  template:
    metadata:
      labels:
        app: sla-status-api
    spec:
      containers:
      - name: api
        image: hyperconformal/sla-status-api:latest
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: PROMETHEUS_URL
          value: "http://prometheus.hyperconformal-monitoring.svc.cluster.local:9090"
        - name: CACHE_TTL
          value: "60s"
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 10
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL

---
# SLA Status API Service
apiVersion: v1
kind: Service
metadata:
  name: sla-status-api
  namespace: hyperconformal-sla-monitoring
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8080
    name: http
  selector:
    app: sla-status-api

---
# SLA Dashboard Service
apiVersion: v1
kind: Service
metadata:
  name: sla-dashboard
  namespace: hyperconformal-monitoring
  labels:
    app: sla-dashboard
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    name: http
  selector:
    app: grafana

---
# Ingress for SLA Status Page
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sla-status-ingress
  namespace: hyperconformal-sla-monitoring
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - status.hyperconformal.ai
    secretName: sla-status-tls
  rules:
  - host: status.hyperconformal.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: sla-status-api
            port:
              number: 80