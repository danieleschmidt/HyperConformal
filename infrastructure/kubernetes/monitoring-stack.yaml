# Comprehensive Monitoring Stack for HyperConformal Production
# Prometheus, Grafana, AlertManager with SLA tracking

apiVersion: v1
kind: Namespace
metadata:
  name: hyperconformal-monitoring
  labels:
    name: hyperconformal-monitoring
    purpose: observability

---
# Prometheus ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: hyperconformal-monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'hyperconformal-production'
        environment: 'production'
    
    rule_files:
      - "/etc/prometheus/rules/*.yml"
    
    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093
    
    scrape_configs:
    # Kubernetes API server
    - job_name: 'kubernetes-apiservers'
      kubernetes_sd_configs:
      - role: endpoints
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https
    
    # Kubernetes nodes
    - job_name: 'kubernetes-nodes'
      kubernetes_sd_configs:
      - role: node
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics
    
    # HyperConformal application metrics
    - job_name: 'hyperconformal-app'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - hyperconformal-production
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name
    
    # Node Exporter
    - job_name: 'node-exporter'
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - source_labels: [__meta_kubernetes_endpoints_name]
        regex: 'node-exporter'
        action: keep
    
    # cAdvisor
    - job_name: 'kubernetes-cadvisor'
      kubernetes_sd_configs:
      - role: node
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor

---
# Prometheus Alerting Rules
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: hyperconformal-monitoring
data:
  hyperconformal.yml: |
    groups:
    - name: hyperconformal.performance
      rules:
      # SLA Availability Rule (99.99% target)
      - alert: HyperConformalAvailabilityLow
        expr: (up{job="hyperconformal-app"} * 100) < 99.99
        for: 1m
        labels:
          severity: critical
          sla: availability
          compliance: soc2
        annotations:
          summary: "HyperConformal availability below SLA"
          description: "Availability is {{ $value }}%, below 99.99% SLA target"
      
      # Response Time SLA (100ms target)
      - alert: HyperConformalLatencyHigh
        expr: histogram_quantile(0.95, rate(hyperconformal_request_duration_seconds_bucket[5m])) * 1000 > 100
        for: 2m
        labels:
          severity: warning
          sla: latency
        annotations:
          summary: "HyperConformal response time above SLA"
          description: "95th percentile latency is {{ $value }}ms, above 100ms target"
      
      # Throughput monitoring (347K RPS target)
      - alert: HyperConformalThroughputLow
        expr: sum(rate(hyperconformal_requests_total[5m])) < 300000
        for: 5m
        labels:
          severity: warning
          sla: throughput
        annotations:
          summary: "HyperConformal throughput below target"
          description: "Current RPS is {{ $value }}, below 347K target"
      
      # Error rate monitoring
      - alert: HyperConformalErrorRateHigh
        expr: rate(hyperconformal_requests_total{status!~"2.."}[5m]) / rate(hyperconformal_requests_total[5m]) > 0.01
        for: 2m
        labels:
          severity: critical
          sla: error_rate
        annotations:
          summary: "HyperConformal error rate too high"
          description: "Error rate is {{ $value | humanizePercentage }}"
      
      # Memory usage
      - alert: HyperConformalMemoryUsageHigh
        expr: container_memory_usage_bytes{pod=~"hyperconformal-production-.*"} / container_spec_memory_limit_bytes > 0.8
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "HyperConformal memory usage high"
          description: "Memory usage is {{ $value | humanizePercentage }} on pod {{ $labels.pod }}"
      
      # CPU usage
      - alert: HyperConformalCPUUsageHigh
        expr: rate(container_cpu_usage_seconds_total{pod=~"hyperconformal-production-.*"}[5m]) / container_spec_cpu_quota * container_spec_cpu_period > 0.8
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "HyperConformal CPU usage high"
          description: "CPU usage is {{ $value | humanizePercentage }} on pod {{ $labels.pod }}"
      
      # Pod restart monitoring
      - alert: HyperConformalPodRestarting
        expr: increase(kube_pod_container_status_restarts_total{pod=~"hyperconformal-production-.*"}[15m]) > 0
        for: 0m
        labels:
          severity: warning
        annotations:
          summary: "HyperConformal pod restarting"
          description: "Pod {{ $labels.pod }} has restarted {{ $value }} times in the last 15 minutes"
      
      # Quantum algorithm performance
      - alert: QuantumAlgorithmPerformanceDegraded
        expr: hyperconformal_quantum_algorithm_duration_seconds > 0.001
        for: 1m
        labels:
          severity: warning
          algorithm: quantum
        annotations:
          summary: "Quantum algorithm performance degraded"
          description: "Quantum algorithm taking {{ $value }}s, above 1ms target"
      
      # Compliance monitoring
      - alert: ComplianceViolationDetected
        expr: hyperconformal_compliance_violations_total > 0
        for: 0m
        labels:
          severity: critical
          compliance: gdpr
        annotations:
          summary: "Compliance violation detected"
          description: "{{ $value }} compliance violations detected"
    
    - name: hyperconformal.infrastructure
      rules:
      # Kubernetes cluster health
      - alert: KubernetesNodeNotReady
        expr: kube_node_status_condition{condition="Ready",status="true"} == 0
        for: 10m
        labels:
          severity: critical
        annotations:
          summary: "Kubernetes node not ready"
          description: "Node {{ $labels.node }} is not ready"
      
      # Persistent volume issues
      - alert: PersistentVolumeClaimPending
        expr: kube_persistentvolumeclaim_status_phase{phase="Pending"} == 1
        for: 10m
        labels:
          severity: warning
        annotations:
          summary: "PVC is pending"
          description: "PVC {{ $labels.persistentvolumeclaim }} is pending in namespace {{ $labels.namespace }}"

---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: hyperconformal-monitoring
  labels:
    app: prometheus
spec:
  replicas: 2
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus/'
          - '--web.console.libraries=/etc/prometheus/console_libraries'
          - '--web.console.templates=/etc/prometheus/consoles'
          - '--storage.tsdb.retention.time=30d'
          - '--web.enable-lifecycle'
          - '--web.enable-admin-api'
          - '--storage.tsdb.max-block-duration=2h'
          - '--storage.tsdb.min-block-duration=2h'
        ports:
        - containerPort: 9090
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        volumeMounts:
        - name: prometheus-config-volume
          mountPath: /etc/prometheus/
        - name: prometheus-rules-volume
          mountPath: /etc/prometheus/rules/
        - name: prometheus-storage-volume
          mountPath: /prometheus/
      volumes:
      - name: prometheus-config-volume
        configMap:
          defaultMode: 420
          name: prometheus-config
      - name: prometheus-rules-volume
        configMap:
          defaultMode: 420
          name: prometheus-rules
      - name: prometheus-storage-volume
        emptyDir: {}

---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: hyperconformal-monitoring
  labels:
    app: prometheus
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: 9090
  selector:
    app: prometheus

---
# Prometheus ServiceAccount and RBAC
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: hyperconformal-monitoring

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: hyperconformal-monitoring

---
# AlertManager Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanager-config
  namespace: hyperconformal-monitoring
data:
  alertmanager.yml: |
    global:
      smtp_smarthost: 'smtp.gmail.com:587'
      smtp_from: 'alerts@hyperconformal.ai'
      smtp_auth_username: 'alerts@hyperconformal.ai'
      smtp_auth_password: 'your-app-password'
    
    route:
      group_by: ['alertname', 'cluster', 'service']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 1h
      receiver: 'web.hook'
      routes:
      - match:
          severity: critical
        receiver: 'critical-alerts'
      - match:
          sla: availability
        receiver: 'sla-alerts'
      - match:
          compliance: gdpr
        receiver: 'compliance-alerts'
    
    receivers:
    - name: 'web.hook'
      webhook_configs:
      - url: 'http://webhook-receiver:8080/webhook'
        send_resolved: true
    
    - name: 'critical-alerts'
      email_configs:
      - to: 'oncall@hyperconformal.ai'
        subject: 'CRITICAL: HyperConformal Alert - {{ .GroupLabels.alertname }}'
        body: |
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          {{ end }}
      slack_configs:
      - api_url: 'YOUR-SLACK-WEBHOOK-URL'
        channel: '#alerts-critical'
        title: 'Critical Alert: {{ .GroupLabels.alertname }}'
        text: '{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
    
    - name: 'sla-alerts'
      email_configs:
      - to: 'sla-team@hyperconformal.ai'
        subject: 'SLA Violation: {{ .GroupLabels.alertname }}'
        body: |
          SLA Alert Details:
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          SLA Type: {{ .Labels.sla }}
          {{ end }}
    
    - name: 'compliance-alerts'
      email_configs:
      - to: 'compliance@hyperconformal.ai'
        subject: 'COMPLIANCE ALERT: {{ .GroupLabels.alertname }}'
        body: |
          Compliance violation detected:
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Compliance Framework: {{ .Labels.compliance }}
          {{ end }}

---
# AlertManager Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alertmanager
  namespace: hyperconformal-monitoring
  labels:
    app: alertmanager
spec:
  replicas: 2
  selector:
    matchLabels:
      app: alertmanager
  template:
    metadata:
      labels:
        app: alertmanager
    spec:
      containers:
      - name: alertmanager
        image: prom/alertmanager:v0.25.0
        args:
          - '--config.file=/etc/alertmanager/alertmanager.yml'
          - '--storage.path=/alertmanager/'
          - '--web.external-url=http://alertmanager:9093'
          - '--cluster.advertise-address=0.0.0.0:9093'
        ports:
        - containerPort: 9093
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        volumeMounts:
        - name: alertmanager-config-volume
          mountPath: /etc/alertmanager/
        - name: alertmanager-storage-volume
          mountPath: /alertmanager/
      volumes:
      - name: alertmanager-config-volume
        configMap:
          defaultMode: 420
          name: alertmanager-config
      - name: alertmanager-storage-volume
        emptyDir: {}

---
# AlertManager Service
apiVersion: v1
kind: Service
metadata:
  name: alertmanager
  namespace: hyperconformal-monitoring
  labels:
    app: alertmanager
spec:
  type: ClusterIP
  ports:
  - port: 9093
    targetPort: 9093
  selector:
    app: alertmanager

---
# Grafana Deployment with HyperConformal Dashboards
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: hyperconformal-monitoring
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:10.0.0
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "hyperconformal-admin"
        - name: GF_USERS_ALLOW_SIGN_UP
          value: "false"
        - name: GF_INSTALL_PLUGINS
          value: "grafana-clock-panel,grafana-simple-json-datasource"
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboards-config
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-dashboards
          mountPath: /var/lib/grafana/dashboards
      volumes:
      - name: grafana-storage
        emptyDir: {}
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboards-config
        configMap:
          name: grafana-dashboards-config
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards

---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: hyperconformal-monitoring
  labels:
    app: grafana
spec:
  type: LoadBalancer
  ports:
  - port: 3000
    targetPort: 3000
  selector:
    app: grafana

---
# Grafana Datasource Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: hyperconformal-monitoring
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus:9090
      isDefault: true
      editable: false

---
# Grafana Dashboard Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-config
  namespace: hyperconformal-monitoring
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards

---
# Grafana Dashboards
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: hyperconformal-monitoring
data:
  hyperconformal-performance.json: |
    {
      "dashboard": {
        "id": null,
        "title": "HyperConformal Performance Dashboard",
        "tags": ["hyperconformal", "performance", "sla"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Requests per Second",
            "type": "stat",
            "targets": [
              {
                "expr": "sum(rate(hyperconformal_requests_total[5m]))",
                "legendFormat": "RPS"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "thresholds": {
                  "steps": [
                    {"color": "red", "value": 0},
                    {"color": "yellow", "value": 300000},
                    {"color": "green", "value": 347000}
                  ]
                }
              }
            }
          },
          {
            "id": 2,
            "title": "Response Time (95th percentile)",
            "type": "stat",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(hyperconformal_request_duration_seconds_bucket[5m])) * 1000",
                "legendFormat": "Latency (ms)"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "thresholds": {
                  "steps": [
                    {"color": "green", "value": 0},
                    {"color": "yellow", "value": 50},
                    {"color": "red", "value": 100}
                  ]
                }
              }
            }
          },
          {
            "id": 3,
            "title": "Availability",
            "type": "stat",
            "targets": [
              {
                "expr": "avg(up{job=\"hyperconformal-app\"}) * 100",
                "legendFormat": "Availability %"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "thresholds": {
                  "steps": [
                    {"color": "red", "value": 0},
                    {"color": "yellow", "value": 99.9},
                    {"color": "green", "value": 99.99}
                  ]
                }
              }
            }
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "5s"
      }
    }