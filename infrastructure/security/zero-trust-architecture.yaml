# Zero-Trust Security Architecture for HyperConformal
# Enterprise-grade security with end-to-end encryption

apiVersion: v1
kind: Namespace
metadata:
  name: hyperconformal-security
  labels:
    name: hyperconformal-security
    security-tier: enterprise
  annotations:
    security.hyperconformal.ai/zero-trust: "enabled"
    security.hyperconformal.ai/encryption: "required"

---
# Certificate Authority for mTLS
apiVersion: v1
kind: Secret
metadata:
  name: hyperconformal-ca-certificate
  namespace: hyperconformal-security
type: kubernetes.io/tls
data:
  # This would contain the actual CA certificate and key in base64
  tls.crt: LS0tLS1CRUdJTi... # Base64 encoded CA certificate
  tls.key: LS0tLS1CRUdJTi... # Base64 encoded CA private key

---
# Service Mesh Security Policies (Istio)
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default
  namespace: hyperconformal-production
spec:
  mtls:
    mode: STRICT  # Require mTLS for all communications

---
# Authorization Policy for API Access
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: hyperconformal-api-access
  namespace: hyperconformal-production
spec:
  selector:
    matchLabels:
      app: hyperconformal
  rules:
  # Allow health checks
  - to:
    - operation:
        paths: ["/health/*", "/ready", "/live"]
  # Allow authenticated API access
  - from:
    - source:
        principals: ["cluster.local/ns/hyperconformal-production/sa/hyperconformal-sa"]
    to:
    - operation:
        paths: ["/api/*"]
  # Allow metrics collection
  - from:
    - source:
        principals: ["cluster.local/ns/hyperconformal-monitoring/sa/prometheus"]
    to:
    - operation:
        paths: ["/metrics"]

---
# Network Policies for Zero-Trust Networking
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: hyperconformal-zero-trust-ingress
  namespace: hyperconformal-production
spec:
  podSelector:
    matchLabels:
      app: hyperconformal
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow traffic only from authorized sources
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    - namespaceSelector:
        matchLabels:
          name: hyperconformal-monitoring
    - podSelector:
        matchLabels:
          app: hyperconformal
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 8081
    - protocol: TCP
      port: 8082
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow secure external communications
  - to: []
    ports:
    - protocol: TCP
      port: 443
  # Allow database connections with encryption
  - to:
    - podSelector:
        matchLabels:
          app: postgresql
    ports:
    - protocol: TCP
      port: 5432
  # Allow Redis connections with TLS
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6380  # TLS Redis port

---
# Service Account for Zero-Trust Identity
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hyperconformal-zero-trust-sa
  namespace: hyperconformal-production
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT-ID:role/hyperconformal-zero-trust-role"
    security.hyperconformal.ai/identity-verified: "true"

---
# Pod Security Policy
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: hyperconformal-security-policy
  namespace: hyperconformal-production
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  allowedCapabilities:
    - NET_BIND_SERVICE
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  readOnlyRootFilesystem: true

---
# Role for Pod Security Policy
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: hyperconformal-psp-user
  namespace: hyperconformal-production
rules:
- apiGroups: ['policy']
  resources: ['podsecuritypolicies']
  verbs: ['use']
  resourceNames:
  - hyperconformal-security-policy

---
# RoleBinding for Pod Security Policy
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: hyperconformal-psp-user-binding
  namespace: hyperconformal-production
roleRef:
  kind: Role
  name: hyperconformal-psp-user
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: hyperconformal-zero-trust-sa
  namespace: hyperconformal-production

---
# Secret Scanner for Runtime Security
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: hyperconformal-secret-scanner
  namespace: hyperconformal-security
spec:
  selector:
    matchLabels:
      app: secret-scanner
  template:
    metadata:
      labels:
        app: secret-scanner
    spec:
      hostNetwork: false
      hostPID: false
      hostIPC: false
      containers:
      - name: secret-scanner
        image: aquasec/trivy:latest
        command: ["/bin/sh"]
        args:
        - -c
        - |
          while true; do
            echo "Scanning for secrets and vulnerabilities..."
            trivy fs --security-checks secret,vuln /var/lib/docker/containers
            sleep 3600
          done
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: docker-containers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: docker-containers
        hostPath:
          path: /var/lib/docker/containers
          type: Directory
      - name: tmp
        emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - operator: Exists

---
# Security Monitoring and Alerting
apiVersion: v1
kind: ConfigMap
metadata:
  name: security-monitoring-config
  namespace: hyperconformal-security
data:
  falco.yaml: |
    rules_file:
      - /etc/falco/falco_rules.yaml
      - /etc/falco/hyperconformal_rules.yaml
    
    json_output: true
    json_include_output_property: true
    
    http_output:
      enabled: true
      url: "http://security-webhook:8080/security-alert"
    
    program_output:
      enabled: true
      keep_alive: false
      program: "curl -X POST http://security-webhook:8080/security-alert -H 'Content-Type: application/json' -d @-"

  hyperconformal_rules.yaml: |
    - rule: Unauthorized API Access
      desc: Detect unauthorized access to HyperConformal API
      condition: >
        k8s_audit and
        ka.target.resource=pods and
        ka.uri.path contains "/api/" and
        not ka.user.name in (hyperconformal-sa, system:serviceaccount:hyperconformal-production:hyperconformal-sa)
      output: >
        Unauthorized API access detected (user=%ka.user.name uri=%ka.uri.path 
        source=%ka.source.ip resource=%ka.target.resource)
      priority: CRITICAL
    
    - rule: Sensitive File Access
      desc: Detect access to sensitive files containing secrets
      condition: >
        open_read and
        (fd.name contains "/etc/secrets/" or
         fd.name contains "/var/run/secrets/" or
         fd.name contains ".key" or
         fd.name contains ".pem")
      output: >
        Sensitive file accessed (user=%user.name command=%proc.cmdline file=%fd.name)
      priority: WARNING
    
    - rule: Privilege Escalation Attempt
      desc: Detect attempts to escalate privileges
      condition: >
        spawned_process and
        (proc.name in (sudo, su, setuid) or
         proc.args contains "chmod +s")
      output: >
        Privilege escalation attempt (user=%user.name command=%proc.cmdline container=%container.name)
      priority: CRITICAL
    
    - rule: Network Connection to Suspicious Destinations
      desc: Detect network connections to suspicious destinations
      condition: >
        outbound and
        (fd.sip in (suspicious_ips) or
         fd.sport in (suspicious_ports))
      output: >
        Suspicious network connection (container=%container.name dest_ip=%fd.sip dest_port=%fd.sport)
      priority: WARNING

---
# Falco Security Runtime Monitor
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: falco
  namespace: hyperconformal-security
spec:
  selector:
    matchLabels:
      app: falco
  template:
    metadata:
      labels:
        app: falco
    spec:
      serviceAccountName: falco
      hostNetwork: true
      hostPID: true
      containers:
      - name: falco
        image: falcosecurity/falco:0.35.1
        args:
          - /usr/bin/falco
          - --cri=/run/containerd/containerd.sock
          - --k8s-api=https://kubernetes.default.svc
          - -K=/var/run/secrets/kubernetes.io/serviceaccount/token
          - -k=https://kubernetes.default.svc
          - --k8s-node=$(FALCO_K8S_NODE_NAME)
          - -pk
        env:
        - name: FALCO_K8S_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        securityContext:
          privileged: true
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: dev-fs
          mountPath: /host/dev
          readOnly: true
        - name: proc-fs
          mountPath: /host/proc
          readOnly: true
        - name: boot-fs
          mountPath: /host/boot
          readOnly: true
        - name: lib-modules
          mountPath: /host/lib/modules
          readOnly: true
        - name: usr-fs
          mountPath: /host/usr
          readOnly: true
        - name: etc-fs
          mountPath: /host/etc
          readOnly: true
        - name: config-volume
          mountPath: /etc/falco
      volumes:
      - name: dev-fs
        hostPath:
          path: /dev
      - name: proc-fs
        hostPath:
          path: /proc
      - name: boot-fs
        hostPath:
          path: /boot
      - name: lib-modules
        hostPath:
          path: /lib/modules
      - name: usr-fs
        hostPath:
          path: /usr
      - name: etc-fs
        hostPath:
          path: /etc
      - name: config-volume
        configMap:
          name: security-monitoring-config
      tolerations:
      - operator: Exists

---
# Falco ServiceAccount and RBAC
apiVersion: v1
kind: ServiceAccount
metadata:
  name: falco
  namespace: hyperconformal-security

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: falco
rules:
- apiGroups: [""]
  resources: ["nodes", "pods", "services", "events"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "daemonsets", "replicasets"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: falco
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: falco
subjects:
- kind: ServiceAccount
  name: falco
  namespace: hyperconformal-security

---
# Encryption at Rest Configuration
apiVersion: v1
kind: Secret
metadata:
  name: encryption-config
  namespace: hyperconformal-security
type: Opaque
data:
  encryption-config.yaml: |
    apiVersion: apiserver.config.k8s.io/v1
    kind: EncryptionConfiguration
    resources:
    - resources:
      - secrets
      - configmaps
      providers:
      - aescbc:
          keys:
          - name: key1
            secret: YOUR_32_BYTE_KEY_HERE
      - identity: {}

---
# Certificate Management for mTLS
apiVersion: v1
kind: ConfigMap
metadata:
  name: certificate-manager-config
  namespace: hyperconformal-security
data:
  cert-manager.yaml: |
    apiVersion: cert-manager.io/v1
    kind: ClusterIssuer
    metadata:
      name: hyperconformal-ca-issuer
    spec:
      ca:
        secretName: hyperconformal-ca-certificate
    ---
    apiVersion: cert-manager.io/v1
    kind: Certificate
    metadata:
      name: hyperconformal-tls-cert
      namespace: hyperconformal-production
    spec:
      secretName: hyperconformal-tls-secret
      issuerRef:
        name: hyperconformal-ca-issuer
        kind: ClusterIssuer
      commonName: hyperconformal.local
      dnsNames:
      - hyperconformal.local
      - hyperconformal-production.hyperconformal.local
      - "*.hyperconformal.local"

---
# Security Webhook for Alert Processing
apiVersion: apps/v1
kind: Deployment
metadata:
  name: security-webhook
  namespace: hyperconformal-security
spec:
  replicas: 2
  selector:
    matchLabels:
      app: security-webhook
  template:
    metadata:
      labels:
        app: security-webhook
    spec:
      containers:
      - name: webhook
        image: nginx:1.25-alpine
        ports:
        - containerPort: 8080
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL

---
# Security Webhook Service
apiVersion: v1
kind: Service
metadata:
  name: security-webhook
  namespace: hyperconformal-security
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
  selector:
    app: security-webhook

---
# Admission Controller for Security Validation
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionWebhook
metadata:
  name: hyperconformal-security-validator
webhooks:
- name: security.hyperconformal.ai
  clientConfig:
    service:
      name: security-webhook
      namespace: hyperconformal-security
      path: "/validate"
  rules:
  - operations: ["CREATE", "UPDATE"]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  admissionReviewVersions: ["v1", "v1beta1"]
  sideEffects: None
  failurePolicy: Fail

---
# Security Metrics and Monitoring
apiVersion: v1
kind: Service
metadata:
  name: security-metrics
  namespace: hyperconformal-security
  labels:
    app: security-metrics
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    name: metrics
  selector:
    app: security-webhook

---
# OAuth2 Proxy for Authentication
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oauth2-proxy
  namespace: hyperconformal-security
spec:
  replicas: 2
  selector:
    matchLabels:
      app: oauth2-proxy
  template:
    metadata:
      labels:
        app: oauth2-proxy
    spec:
      containers:
      - name: oauth2-proxy
        image: quay.io/oauth2-proxy/oauth2-proxy:v7.4.0
        args:
        - --provider=oidc
        - --email-domain=*
        - --upstream=file:///dev/null
        - --http-address=0.0.0.0:4180
        - --oidc-issuer-url=https://your-oidc-provider.com
        - --client-id=hyperconformal-client
        - --client-secret=your-client-secret
        - --cookie-secret=your-cookie-secret
        - --cookie-secure=true
        - --cookie-httponly=true
        - --set-authorization-header=true
        - --set-xauthrequest=true
        ports:
        - containerPort: 4180
          protocol: TCP
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL

---
# OAuth2 Proxy Service
apiVersion: v1
kind: Service
metadata:
  name: oauth2-proxy
  namespace: hyperconformal-security
spec:
  type: ClusterIP
  ports:
  - port: 4180
    targetPort: 4180
  selector:
    app: oauth2-proxy